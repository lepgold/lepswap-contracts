{
  "address": "0xcf6981fC24fBBb5c279F19bd481fD08dfE45Fb46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gold",
          "type": "address"
        },
        {
          "internalType": "contract ITreasureChestWithdraw",
          "name": "_bentoBox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lep",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_pairCodeHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "LogBridgeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "server",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountBENTO",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSUSHI",
          "type": "uint256"
        }
      ],
      "name": "LogConvert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBankWithdrawFee",
          "name": "kashiPair",
          "type": "address"
        }
      ],
      "name": "convert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBankWithdrawFee[]",
          "name": "kashiPair",
          "type": "address[]"
        }
      ],
      "name": "convertMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "name": "setBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7cb7a7b4cd5b05867863977312a9b5ae150ff055c15dd6e1f565ecdfa6cce99",
  "receipt": {
    "to": null,
    "from": "0x6469cA900D7D9be6a6bA4E33a5bdBE35E1782c9F",
    "contractAddress": "0xcf6981fC24fBBb5c279F19bd481fD08dfE45Fb46",
    "transactionIndex": 0,
    "gasUsed": "967664",
    "logsBloom": "0x
    "blockHash": "0x0d99835b945c14a70b22950d541b971ecf9ac4c94eeb909cfb217cde9b676b53",
    "transactionHash": "0xb7cb7a7b4cd5b05867863977312a9b5ae150ff055c15dd6e1f565ecdfa6cce99",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10,
        "transactionHash": "0xb7cb7a7b4cd5b05867863977312a9b5ae150ff055c15dd6e1f565ecdfa6cce99",
        "address": "0xcf6981fC24fBBb5c279F19bd481fD08dfE45Fb46",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006469ca900d7d9be6a6ba4e33a5bdbe35e1782c9f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0d99835b945c14a70b22950d541b971ecf9ac4c94eeb909cfb217cde9b676b53"
      }
    ],
    "blockNumber": 10,
    "cumulativeGasUsed": "967664",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD2123E7188B05273448fE825e1d946273925c2BB",
    "0xA472E991851E38Cd57a686761c9651eF95E77fB5",
    "0x37e5B183E0273722BF7BeC17F75068b7e76B028a",
    "0x3Cf45063806D1fDF3eb0DAeB19E9446b9A96eB98",
    "0xBcEe9cFE1F7650a6d94E486D99eD2f8A693a2A9b",
    "0x15cdd3e983960c60461dfb32e5fdb58b215f4d9316afccd61cf2c00a4404059e"
  ],
  "solcInputHash": "d245e09cf205d40217fc87e8240d8965",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gold\",\"type\":\"address\"},{\"internalType\":\"contract ITreasureChestWithdraw\",\"name\":\"_bentoBox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lep\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"LogBridgeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBENTO\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSUSHI\",\"type\":\"uint256\"}],\"name\":\"LogConvert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBankWithdrawFee\",\"name\":\"kashiPair\",\"type\":\"address\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBankWithdrawFee[]\",\"name\":\"kashiPair\",\"type\":\"address[]\"}],\"name\":\"convertMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LepGoldBank.sol\":\"LepGoldBank\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/LepGoldBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\nimport \\\"./libraries/SafeMath.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./uniswapv2/interfaces/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ninterface ITreasureChestWithdraw {\\n    function withdraw(\\n        IERC20 token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\\ninterface IBankWithdrawFee {\\n    function asset() external view returns (address);\\n    function balanceOf(address account) external view returns (uint256);\\n    function withdrawFees() external;\\n    function removeAsset(address to, uint256 fraction) external returns (uint256 share);\\n}\\n\\n// LepGoldBank is MasterLep's left hand and kinda a wizard. He can cook up Lep from pretty much anything!\\n// This contract handles \\\"serving up\\\" rewards for xLep holders by trading tokens collected from Kashi fees for Lep.\\ncontract LepGoldBank is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Factory private immutable factory;\\n    //0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\\n    address private immutable gold;\\n    //0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272\\n    ITreasureChestWithdraw private immutable bentoBox;\\n    //0xF5BCE5077908a1b7370B9ae04AdC565EBd643966 \\n    address private immutable lep;\\n    //0x6B3595068778DD592e39A122f4f5a5cF09C90fE2\\n    address private immutable weth;\\n    //0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    bytes32 private immutable pairCodeHash;\\n    //0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303\\n\\n    mapping(address => address) private _bridges;\\n\\n    event LogBridgeSet(address indexed token, address indexed bridge);\\n    event LogConvert(\\n        address indexed server,\\n        address indexed token0,\\n        uint256 amount0,\\n        uint256 amountBENTO,\\n        uint256 amountSUSHI\\n    );\\n\\n    constructor(\\n        IUniswapV2Factory _factory,\\n        address _gold,\\n        ITreasureChestWithdraw _bentoBox,\\n        address _lep,\\n        address _weth,\\n        bytes32 _pairCodeHash\\n    ) public {\\n        factory = _factory;\\n        gold = _gold;\\n        bentoBox = _bentoBox;\\n        lep = _lep;\\n        weth = _weth;\\n        pairCodeHash = _pairCodeHash;\\n    }\\n\\n    function setBridge(address token, address bridge) external onlyOwner {\\n        // Checks\\n        require(\\n            token != lep && token != weth && token != bridge,\\n            \\\"Maker: Invalid bridge\\\"\\n        );\\n        // Effects\\n        _bridges[token] = bridge;\\n        emit LogBridgeSet(token, bridge);\\n    }\\n\\n    modifier onlyEOA() {\\n        // Try to make flash-loan exploit harder to do by only allowing externally-owned addresses.\\n        require(msg.sender == tx.origin, \\\"Maker: Must use EOA\\\");\\n        _;\\n    }\\n\\n    function convert(IBankWithdrawFee kashiPair) external onlyEOA {\\n        _convert(kashiPair);\\n    }\\n\\n    function convertMultiple(IBankWithdrawFee[] calldata kashiPair) external onlyEOA {\\n        for (uint256 i = 0; i < kashiPair.length; i++) {\\n            _convert(kashiPair[i]);\\n        }\\n    }\\n\\n    function _convert(IBankWithdrawFee kashiPair) private {\\n        // update Kashi fees for this Maker contract (`feeTo`)\\n        kashiPair.withdrawFees();\\n\\n        // convert updated Kashi balance to Bento shares\\n        uint256 bentoShares = kashiPair.removeAsset(address(this), kashiPair.balanceOf(address(this)));\\n\\n        // convert Bento shares to underlying Kashi asset (`token0`) balance (`amount0`) for Maker\\n        address token0 = kashiPair.asset();\\n        (uint256 amount0, ) = bentoBox.withdraw(IERC20(token0), address(this), address(this), 0, bentoShares);\\n\\n        emit LogConvert(\\n            msg.sender,\\n            token0,\\n            amount0,\\n            bentoShares,\\n            _convertStep(token0, amount0)\\n        );\\n    }\\n\\n    function _convertStep(address token0, uint256 amount0) private returns (uint256 lepOut) {\\n        if (token0 == lep) {\\n            IERC20(token0).safeTransfer(gold, amount0);\\n            lepOut = amount0;\\n        } else if (token0 == weth) {\\n            lepOut = _swap(token0, lep, amount0, gold);\\n        } else {\\n            address bridge = _bridges[token0];\\n            if (bridge == address(0)) {\\n                bridge = weth;\\n            }\\n            uint256 amountOut = _swap(token0, bridge, amount0, address(this));\\n            lepOut = _convertStep(bridge, amountOut);\\n        }\\n    }\\n\\n    function _swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amountIn,\\n        address to\\n    ) private returns (uint256 amountOut) {\\n        (address token0, address token1) = fromToken < toToken ? (fromToken, toToken) : (toToken, fromToken);\\n        IUniswapV2Pair pair =\\n            IUniswapV2Pair(\\n                uint256(\\n                    keccak256(abi.encodePacked(hex\\\"ff\\\", factory, keccak256(abi.encodePacked(token0, token1)), pairCodeHash))\\n                )\\n            );\\n        \\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        \\n        if (toToken > fromToken) {\\n            amountOut =\\n                amountInWithFee.mul(reserve1) /\\n                reserve0.mul(1000).add(amountInWithFee);\\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n            pair.swap(0, amountOut, to, \\\"\\\");\\n        } else {\\n            amountOut =\\n                amountInWithFee.mul(reserve0) /\\n                reserve1.mul(1000).add(amountInWithFee);\\n            IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n            pair.swap(amountOut, 0, to, \\\"\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d11b5245e27dfcacfc80c69f1ab6396b86759a6f96b5caeef2b51780464d1d6\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\\n\\n// P1 - P3: OK\\npragma solidity 0.6.12;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Edited by BoringCrypto\\n\\n// T1 - T4: OK\\ncontract OwnableData {\\n    // V1 - V5: OK\\n    address public owner;\\n    // V1 - V5: OK\\n    address public pendingOwner;\\n}\\n\\n// T1 - T4: OK\\ncontract Ownable is OwnableData {\\n    // E1: OK\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () internal {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    // F1 - F9: OK\\n    // C1 - C21: OK\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    // M1 - M5: OK\\n    // C1 - C21: OK\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2d3206aa7bcc1a8cad9f201d15a86c79cbc1fe60ddc73b5e458b3f0e76cc84a6\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // EIP 2612\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\",\"keccak256\":\"0xbc2bbe46ffb84b39aa0e39c925b071e3a2ce6e912f7f216619550a38bbf0f9b3\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nlibrary SafeERC20 {\\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeName(IERC20 token) internal view returns(string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\\n        return success && data.length > 0 ? abi.decode(data, (string)) : \\\"???\\\";\\n    }\\n\\n    function safeDecimals(IERC20 token) public view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: Transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, uint256 amount) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SafeERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0d6a8df0657b5b75deb4606cfa91035065a25f1ed407f8ad6240a78871b6f0ba\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \\\"SafeMath: Add Overflow\\\");}\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \\\"SafeMath: Underflow\\\");}\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \\\"SafeMath: Mul Overflow\\\");}\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"SafeMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n}\\n\\nlibrary SafeMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \\\"SafeMath: Add Overflow\\\");}\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \\\"SafeMath: Underflow\\\");}\\n}\\n\",\"keccak256\":\"0xf05f427c6f96fd491b23519a46531ad76d47d66316430eec1f586dd12ed7fb7e\",\"license\":\"MIT\"},\"contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xcaec675e6250bf4cd3364459a0cbf789262af2aaa377d61d4d463f657aea7b50\",\"license\":\"GPL-3.0\"},\"contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61014060405234801561001157600080fd5b50604051611156380380611156833981810160405260c081101561003457600080fd5b50805160208201516040808401516060850151608086015160a090960151600080546001600160a01b0319163390811782559451969795969395929492939192917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36001600160601b0319606096871b811660805294861b851660a05292851b841660c05290841b831660e05290921b16610100526101205260805160601c60a05160601c60c05160601c60e05160601c6101005160601c6101205161101461014260003980610c8052508061045d528061098b5280610a39525080610420528061091652806109c952508061084452508061095d52806109eb525080610c1852506110146000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639d22ae8c1161005b5780639d22ae8c146100e6578063b11e93a914610114578063def2489b14610184578063e30c3978146101aa5761007d565b8063078dfbe7146100825780634e71e0c8146100ba5780638da5cb5b146100c2575b600080fd5b6100b86004803603606081101561009857600080fd5b506001600160a01b038135169060208101351515906040013515156101b2565b005b6100b86102ee565b6100ca6103b0565b604080516001600160a01b039092168252519081900360200190f35b6100b8600480360360408110156100fc57600080fd5b506001600160a01b03813581169160200135166103bf565b6100b86004803603602081101561012a57600080fd5b81019060208101813564010000000081111561014557600080fd5b82018360208201111561015757600080fd5b8035906020019184602083028401116401000000008311171561017957600080fd5b509092509050610550565b6100b86004803603602081101561019a57600080fd5b50356001600160a01b03166105d1565b6100ca610627565b6000546001600160a01b03163314610211576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b81156102cd576001600160a01b03831615158061022b5750805b610274576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0385161790556102e9565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b6001546001600160a01b031633811461034e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b031681565b6000546001600160a01b0316331461041e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415801561049257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b80156104b05750806001600160a01b0316826001600160a01b031614155b6104f9576040805162461bcd60e51b81526020600482015260156024820152744d616b65723a20496e76616c69642062726964676560581b604482015290519081900360640190fd5b6001600160a01b0382811660008181526002602052604080822080546001600160a01b0319169486169485179055517f2e103aa707acc565f9a1547341914802b2bfe977fd79c595209f248ae4b006139190a35050565b33321461059a576040805162461bcd60e51b81526020600482015260136024820152724d616b65723a204d7573742075736520454f4160681b604482015290519081900360640190fd5b60005b818110156102e9576105c98383838181106105b457fe5b905060200201356001600160a01b0316610636565b60010161059d565b33321461061b576040805162461bcd60e51b81526020600482015260136024820152724d616b65723a204d7573742075736520454f4160681b604482015290519081900360640190fd5b61062481610636565b50565b6001546001600160a01b031681565b806001600160a01b031663476343ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561067157600080fd5b505af1158015610685573d6000803e3d6000fd5b505050506000816001600160a01b0316632317ef6730846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d602081101561071257600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561076357600080fd5b505af1158015610777573d6000803e3d6000fd5b505050506040513d602081101561078d57600080fd5b5051604080516338d52e0f60e01b815290519192506000916001600160a01b038516916338d52e0f916004808301926020929190829003018186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b505050506040513d60208110156107ff57600080fd5b50516040805163097da6d360e41b81526001600160a01b03808416600483015230602483018190526044830152600060648301819052608483018790528351949550937f0000000000000000000000000000000000000000000000000000000000000000909116926397da6d309260a4808201939182900301818787803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b505050506040513d60408110156108b357600080fd5b505190506001600160a01b038216337f478cd2df03921485edb4ef53f1cd6747ea7527ef8eb1b27be969115a0964edfb83866108ef8783610912565b60408051938452602084019290925282820152519081900360600190a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610989576109826001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000084610a7e565b5080610a78565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610a1657610a0f837f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000610be8565b9050610a78565b6001600160a01b038084166000908152600260205260409020541680610a5957507f00000000000000000000000000000000000000000000000000000000000000005b6000610a6785838630610be8565b9050610a738282610912565b925050505b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610afb5780518252601f199092019160209182019101610adc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610b5d576040519150601f19603f3d011682016040523d82523d6000602084013e610b62565b606091505b5091509150818015610b90575080511580610b905750808060200190516020811015610b8d57600080fd5b50515b610be1576040805162461bcd60e51b815260206004820152601a60248201527f5361666545524332303a205472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b5050505050565b6000806000856001600160a01b0316876001600160a01b031610610c0d578587610c10565b86865b9150915060007f0000000000000000000000000000000000000000000000000000000000000000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001207f000000000000000000000000000000000000000000000000000000000000000060405160200180806001600160f81b0319815250600101846001600160a01b031660601b815260140183815260200182815260200193505050506040516020818303038152906040528051906020012060001c9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610d3057600080fd5b505afa158015610d44573d6000803e3d6000fd5b505050506040513d6060811015610d5a57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506000610d88896103e5610f28565b90508a6001600160a01b03168a6001600160a01b03161115610e6457610dba81610db4856103e8610f28565b90610f8d565b610dc48284610f28565b81610dcb57fe5b049650610de26001600160a01b038c16858b610a7e565b6040805163022c0d9f60e01b8152600060048201819052602482018a90526001600160a01b038b81166044840152608060648401526084830182905292519287169263022c0d9f9260c480820193929182900301818387803b158015610e4757600080fd5b505af1158015610e5b573d6000803e3d6000fd5b50505050610f1a565b610e7481610db4846103e8610f28565b610e7e8285610f28565b81610e8557fe5b049650610e9c6001600160a01b038c16858b610a7e565b6040805163022c0d9f60e01b8152600481018990526000602482018190526001600160a01b038b81166044840152608060648401526084830182905292519287169263022c0d9f9260c480820193929182900301818387803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b505050505b505050505050949350505050565b6000811580610f4357505080820282828281610f4057fe5b04145b610a78576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a204d756c204f766572666c6f7760501b604482015290519081900360640190fd5b81810181811015610a78576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a20416464204f766572666c6f7760501b604482015290519081900360640190fdfea2646970667358221220610ff8c4549f8331e7a5a2b51c040cf858cc621f8ee0f2ae9985c5e3c680855264736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80639d22ae8c1161005b5780639d22ae8c146100e6578063b11e93a914610114578063def2489b14610184578063e30c3978146101aa5761007d565b8063078dfbe7146100825780634e71e0c8146100ba5780638da5cb5b146100c2575b600080fd5b6100b86004803603606081101561009857600080fd5b506001600160a01b038135169060208101351515906040013515156101b2565b005b6100b86102ee565b6100ca6103b0565b604080516001600160a01b039092168252519081900360200190f35b6100b8600480360360408110156100fc57600080fd5b506001600160a01b03813581169160200135166103bf565b6100b86004803603602081101561012a57600080fd5b81019060208101813564010000000081111561014557600080fd5b82018360208201111561015757600080fd5b8035906020019184602083028401116401000000008311171561017957600080fd5b509092509050610550565b6100b86004803603602081101561019a57600080fd5b50356001600160a01b03166105d1565b6100ca610627565b6000546001600160a01b03163314610211576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b81156102cd576001600160a01b03831615158061022b5750805b610274576040805162461bcd60e51b81526020600482015260156024820152744f776e61626c653a207a65726f206164647265737360581b604482015290519081900360640190fd5b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0385161790556102e9565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b6001546001600160a01b031633811461034e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6000546001600160a01b031681565b6000546001600160a01b0316331461041e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415801561049257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b80156104b05750806001600160a01b0316826001600160a01b031614155b6104f9576040805162461bcd60e51b81526020600482015260156024820152744d616b65723a20496e76616c69642062726964676560581b604482015290519081900360640190fd5b6001600160a01b0382811660008181526002602052604080822080546001600160a01b0319169486169485179055517f2e103aa707acc565f9a1547341914802b2bfe977fd79c595209f248ae4b006139190a35050565b33321461059a576040805162461bcd60e51b81526020600482015260136024820152724d616b65723a204d7573742075736520454f4160681b604482015290519081900360640190fd5b60005b818110156102e9576105c98383838181106105b457fe5b905060200201356001600160a01b0316610636565b60010161059d565b33321461061b576040805162461bcd60e51b81526020600482015260136024820152724d616b65723a204d7573742075736520454f4160681b604482015290519081900360640190fd5b61062481610636565b50565b6001546001600160a01b031681565b806001600160a01b031663476343ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561067157600080fd5b505af1158015610685573d6000803e3d6000fd5b505050506000816001600160a01b0316632317ef6730846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156106e857600080fd5b505afa1580156106fc573d6000803e3d6000fd5b505050506040513d602081101561071257600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b15801561076357600080fd5b505af1158015610777573d6000803e3d6000fd5b505050506040513d602081101561078d57600080fd5b5051604080516338d52e0f60e01b815290519192506000916001600160a01b038516916338d52e0f916004808301926020929190829003018186803b1580156107d557600080fd5b505afa1580156107e9573d6000803e3d6000fd5b505050506040513d60208110156107ff57600080fd5b50516040805163097da6d360e41b81526001600160a01b03808416600483015230602483018190526044830152600060648301819052608483018790528351949550937f0000000000000000000000000000000000000000000000000000000000000000909116926397da6d309260a4808201939182900301818787803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b505050506040513d60408110156108b357600080fd5b505190506001600160a01b038216337f478cd2df03921485edb4ef53f1cd6747ea7527ef8eb1b27be969115a0964edfb83866108ef8783610912565b60408051938452602084019290925282820152519081900360600190a350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610989576109826001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000084610a7e565b5080610a78565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03161415610a1657610a0f837f0000000000000000000000000000000000000000000000000000000000000000847f0000000000000000000000000000000000000000000000000000000000000000610be8565b9050610a78565b6001600160a01b038084166000908152600260205260409020541680610a5957507f00000000000000000000000000000000000000000000000000000000000000005b6000610a6785838630610be8565b9050610a738282610912565b925050505b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b60208310610afb5780518252601f199092019160209182019101610adc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610b5d576040519150601f19603f3d011682016040523d82523d6000602084013e610b62565b606091505b5091509150818015610b90575080511580610b905750808060200190516020811015610b8d57600080fd5b50515b610be1576040805162461bcd60e51b815260206004820152601a60248201527f5361666545524332303a205472616e73666572206661696c6564000000000000604482015290519081900360640190fd5b5050505050565b6000806000856001600160a01b0316876001600160a01b031610610c0d578587610c10565b86865b9150915060007f0000000000000000000000000000000000000000000000000000000000000000838360405160200180836001600160a01b031660601b8152601401826001600160a01b031660601b815260140192505050604051602081830303815290604052805190602001207f000000000000000000000000000000000000000000000000000000000000000060405160200180806001600160f81b0319815250600101846001600160a01b031660601b815260140183815260200182815260200193505050506040516020818303038152906040528051906020012060001c9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610d3057600080fd5b505afa158015610d44573d6000803e3d6000fd5b505050506040513d6060811015610d5a57600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506000610d88896103e5610f28565b90508a6001600160a01b03168a6001600160a01b03161115610e6457610dba81610db4856103e8610f28565b90610f8d565b610dc48284610f28565b81610dcb57fe5b049650610de26001600160a01b038c16858b610a7e565b6040805163022c0d9f60e01b8152600060048201819052602482018a90526001600160a01b038b81166044840152608060648401526084830182905292519287169263022c0d9f9260c480820193929182900301818387803b158015610e4757600080fd5b505af1158015610e5b573d6000803e3d6000fd5b50505050610f1a565b610e7481610db4846103e8610f28565b610e7e8285610f28565b81610e8557fe5b049650610e9c6001600160a01b038c16858b610a7e565b6040805163022c0d9f60e01b8152600481018990526000602482018190526001600160a01b038b81166044840152608060648401526084830182905292519287169263022c0d9f9260c480820193929182900301818387803b158015610f0157600080fd5b505af1158015610f15573d6000803e3d6000fd5b505050505b505050505050949350505050565b6000811580610f4357505080820282828281610f4057fe5b04145b610a78576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a204d756c204f766572666c6f7760501b604482015290519081900360640190fd5b81810181811015610a78576040805162461bcd60e51b8152602060048201526016602482015275536166654d6174683a20416464204f766572666c6f7760501b604482015290519081900360640190fdfea2646970667358221220610ff8c4549f8331e7a5a2b51c040cf858cc621f8ee0f2ae9985c5e3c680855264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5148,
        "contract": "contracts/LepGoldBank.sol:LepGoldBank",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5150,
        "contract": "contracts/LepGoldBank.sol:LepGoldBank",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2987,
        "contract": "contracts/LepGoldBank.sol:LepGoldBank",
        "label": "_bridges",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}